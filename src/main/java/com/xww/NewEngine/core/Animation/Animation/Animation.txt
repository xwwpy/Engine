package com.xww.NewEngine.core.Animation.Animation;

import game.game07.content.Actor.Actor;
import game.game07.core.Timer.Timer;
import game.game07.core.Utils.ImgUtils;
import game.game07.core.Vector.Vector;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

public class Animation {

    public Actor owner;
    private Timer timer;
    boolean is_loop = true;
    int frame_index = 0;
    private AnchorMode anchor_mode = AnchorMode.Centered;
    private List<Frame> frames = new ArrayList<>();
    private Runnable on_complete;

    // 单位毫秒
    private int each_frame_time;
    public static enum AnchorMode {
        Centered,
        BottomCentered,
        LeftTop,
    }
    public static class Frame {
        public ImgUtils.Rect rect_src;

        public Image image;
        public Frame(Image image, ImgUtils.Rect rect_src) {
            BufferedImage image1 = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = image1.createGraphics();
            g2d.drawImage(image, 0, 0, null);
            this.image = ImgUtils.GetDrawRectImage(image1, rect_src, rect_src);
            this. rect_src = rect_src;
        }

        /**
         *
         * @param image 原始图片
         * @param rect_src 截取的部分
         * @param size 目标的图像大小
         */
        public Frame(Image image, ImgUtils.Rect rect_src, Vector size) {
            BufferedImage image1 = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = image1.createGraphics();
            g2d.drawImage(image, 0, 0, null);
            ImgUtils.Rect tar = new ImgUtils.Rect(0, 0, size.getX(), size.getY());
            this.image = ImgUtils.GetDrawRectImage(image1, rect_src, tar);
            this. rect_src = rect_src;
        }
    }
    public Animation(Actor owner, int each_frame_time) {
        this.owner = owner;
        this.each_frame_time = each_frame_time;
        // TODO
        timer = new Timer(each_frame_time, (obj)->{
            frame_index++;
            if (frame_index >= frames.size()) {
                frame_index = is_loop ? 0 : frames.size() - 1;
                if (!is_loop && on_complete != null) {
                    on_complete.run();
                    timer.stop();
                }
            }
        }, null);
        timer.setRun_times(Timer.INFINITE_TIMES);
    }


    public void reset_animation() {
        timer.restart();
        frame_index = 0;
    }
    public void add_frame(BufferedImage image, int num_h) {
        int width = image.getWidth(null);
        int height = image.getHeight(null);
        int width_per_frame = width / num_h;
        for (int i = 0; i < num_h; i++) {
            frames.add(new Frame(image, new ImgUtils.Rect(i * width_per_frame, 0, width_per_frame, height)));
        }
    }
    public void add_frame(Atlas atlas) {
        for (int i = 0; i < atlas.getSize(); i++) {
            frames.add(new Frame(atlas.getImage(i), new ImgUtils.Rect(0, 0, atlas.getImage(i).getWidth(null), atlas.getImage(i).getHeight(null))));
        }
    }

    public void add_frame(Atlas atlas, Vector size) {
        for (int i = 0; i < atlas.getSize(); i++) {
            frames.add(new Frame(atlas.getImage(i), new ImgUtils.Rect(0, 0, atlas.getImage(i).getWidth(null), atlas.getImage(i).getHeight(null)), size));
        }
    }
    public void on_update(Graphics g) {
        this.anchor_mode = this.owner.anchorMode;
        timer.tick();
        this.on_render(g);
    }

    public void on_render(Graphics g) {
        Frame frame = frames.get(frame_index);
        switch (anchor_mode){
            case Centered -> {
                ImgUtils.DrawRectImage(frame,
                        new ImgUtils.Rect(owner.getDrawPosition().getX() - frame.rect_src.width / 2,
                                          owner.getDrawPosition().getY() - frame.rect_src.height / 2,
                                             frame.rect_src.width,
                                             frame.rect_src.height), g);
            }
            case BottomCentered -> {
                ImgUtils.DrawRectImage(frame,
                        new ImgUtils.Rect(owner.getDrawPosition().getX() - frame.rect_src.width / 2,
                                          owner.getDrawPosition().getY() - frame.rect_src.height,
                                             frame.rect_src.width,
                                             frame.rect_src.height), g);
            }
            case LeftTop -> {
                ImgUtils.DrawRectImage(frame,
                        new ImgUtils.Rect(owner.getDrawPosition().getX(),
                                          owner.getDrawPosition().getY(),
                                          frame.rect_src.width,
                                          frame.rect_src.height), g);
            }
        }
    }


    public Timer getTimer() {
        return timer;
    }

    public void setTimer(Timer timer) {
        this.timer = timer;
    }

    public boolean isIs_loop() {
        return is_loop;
    }

    public void setIs_loop(boolean is_loop) {
        this.is_loop = is_loop;
    }

    public int getFrame_index() {
        return frame_index;
    }

    public void setFrame_index(int frame_index) {
        this.frame_index = frame_index;
    }

    public AnchorMode getAnchor_mode() {
        return anchor_mode;
    }

    public void setAnchor_mode(AnchorMode anchor_mode) {
        this.anchor_mode = anchor_mode;
    }

    public List<Frame> getFrames() {
        return frames;
    }

    public void setFrames(List<Frame> frames) {
        this.frames = frames;
    }

    public Runnable getOn_complete() {
        return on_complete;
    }

    public void setOn_complete(Runnable on_complete) {
        this.on_complete = on_complete;
    }

    public Actor getOwner() {
        return owner;
    }

    public void setOwner(Actor owner) {
        this.owner = owner;
    }

    public int getEach_frame_time() {
        return each_frame_time;
    }

    public void setEach_frame_time(int each_frame_time) {
        this.each_frame_time = each_frame_time;
    }
}
